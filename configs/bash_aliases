alias ckin_dbg_cfg='catkin config --cmake-args "-DCMAKE_EXPORT_COMPILE_COMMANDS=1" "-DCMAKE_BUILD_TYPE=Debug" -DCMAKE_CXX_FLAGS="-Werror=uninitialized -Werror=maybe-uninitialized -Werror=return-type -Werror=format -ggdb"'
alias ckin_rel_cfg='catkin config --cmake-args "-DCMAKE_EXPORT_COMPILE_COMMANDS=1" "-DCMAKE_BUILD_TYPE=Release" -DCMAKE_CXX_FLAGS="-Werror=uninitialized -Werror=maybe-uninitialized -Werror=return-type -Werror=format -ggdb"'

function single_ros_test {
	if [ $# -lt 2 ]; then
		echo "Usage: single_ros_test package testname [test args]"
		echo "Use --gtest_filter=SomeRegex* to run specific tests only"
		return;
	fi;
	catkin build "$1" --no-deps --make-args "$2" && rosrun "$1" "$2" "${@:3}"
}

function rostest_gdb {
	if [ $# -lt 2 ]; then
		echo "Usage: rostest_gdb package testname [test args]"
		echo "Use --gtest_filter=SomeRegex* to run specific tests only"
		return;
	fi;
	gdb --args `catkin_find "$1" "$2"` "${@:3}"
}

function single_ros_test_xml {
	if [ $# -lt 2 ]; then
		echo "Usage: single_ros_test_xml package testname [rostest args]"
		return
	fi
	catkin build "$1" --no-deps --make-args "$2" && rostest "${@:3}" "$1" "${2}.xml"
}

function single_ros_test_test {
	if [ $# -lt 2 ]; then
		echo "Usage: single_ros_test_test package testname [rostest args]"
		return
	fi
	catkin build "$1" --no-deps --make-args "$2" && rostest "${@:3}" "$1" "${2}.test"
}

function single_ros_test_launch {
	if [ $# -lt 2 ]; then
		echo "Usage: single_ros_test_launch package testname [rostest args]"
		return
	fi
	catkin build "$1" --no-deps --make-args "$2" && rostest "${@:3}" "$1" "${2}.launch"
}

function rsource {
	local ROS_ROOT="/opt/ros/melodic/setup.bash"
	local WS_ROOT="git"
	local ws=$(pwd | grep -o -e "/home/${USER}/${WS_ROOT}/[^\/]\+")
	if [ -z "$ws" ]; then
		echo "Not inside a workspace, sourcing from ${ROS_ROOT}";
		source ${ROS_ROOT}
		return 0;
	fi;
	local path="${ws}/devel/setup.bash"
	if [ -e "${path}" ]; then
		echo "Sourcing workspace ${path}";
		source "${path}";
		return 0;
	else
		echo "Devel space not found";
		return 2;
	fi;
}

function cdws {
  if [ $# -lt 1 ]; then
    echo "No ws!"
    return
  fi
  local workspace=~/git/${1}
  if [ -d ${workspace} ]; then
    export ROS_WORKSPACE=${workspace}
    cd ${workspace}/src/${1} || cd ${workspace}/src/
    rsource
  fi
}

alias threadps='ps -T -f -p '

function perf_record {
  local pid=$(pidof ${1})
  if [ -z ${pid} ]; then
    echo "No such process"
    return
  fi
  perf record ${@:2} -p ${pid} -o "${HOME}/perf_records/${1}-$(date --iso-8601=seconds).perf"
}

