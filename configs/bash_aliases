alias ckin_dbg_cfg='catkin config --cmake-args "-DCMAKE_EXPORT_COMPILE_COMMANDS=1" "-DCMAKE_BUILD_TYPE=Debug" -DCMAKE_CXX_FLAGS="-Werror=uninitialized -Werror=return-type -Werror=format -ggdb"'
alias ckin_rel_cfg='catkin config --cmake-args "-DCMAKE_EXPORT_COMPILE_COMMANDS=1" "-DCMAKE_BUILD_TYPE=Release" -DCMAKE_CXX_FLAGS="-Werror=uninitialized -Werror=return-type -Werror=format -ggdb"'
alias ckin_dbg_cfg_relaxed='catkin config --cmake-args "-DCMAKE_EXPORT_COMPILE_COMMANDS=1" "-DCMAKE_BUILD_TYPE=Debug" -DCMAKE_CXX_FLAGS="-Werror=uninitialized -Werror=return-type -Werror=format -Wshadow -ggdb"'
alias ckin_rel_cfg_relaxed='catkin config --cmake-args "-DCMAKE_EXPORT_COMPILE_COMMANDS=1" "-DCMAKE_BUILD_TYPE=Release" -DCMAKE_CXX_FLAGS="-Werror=uninitialized -Werror=return-type -Werror=format -Wshadow -ggdb"'
alias clang_build='CC=clang-10 CXX=clang++-10 LD=clang++-10'
alias clang_build_traced='CC="clang-10 -ftime-trace" CXX="clang++-10 -ftime-trace" LD=clang++-10'
alias clang_asan='CC="clang-10 -fsanitize=address" CXX="clang++-10 -fsanitize=address" LD=clang++-10'
alias gnu_asan='CC="gcc -fsanitize=address -ggdb" CXX="g++ -fsanitize=address -ggdb"'
alias dbg_enable='echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope'
alias dbg_disable='echo 1 | sudo tee /proc/sys/kernel/yama/ptrace_scope'
alias perf_enable='echo 0 | sudo tee /proc/sys/kernel/perf_event_paranoid'
alias perf_disable='echo 3 | sudo tee /proc/sys/kernel/perf_event_paranoid'
alias threadps='ps -T -f -p '
alias safety_plot='rosrun rqt_plot rqt_plot cmd_vel_safety/linear/x cmd_vel_reduced/linear/x'

# Toggle debugging, etc
alias dbg_enable='echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope'
alias dbg_disable='echo 1 | sudo tee /proc/sys/kernel/yama/ptrace_scope'
alias perf_enable='echo 0 | sudo tee /proc/sys/kernel/perf_event_paranoid'
alias perf_disable='echo 3 | sudo tee /proc/sys/kernel/perf_event_paranoid'
alias coredumpson='ulimit -c unlimited'
alias coredumpsoff='ulimit -c 0'

function verbose_rosconsole {
  export ROSCONSOLE_FORMAT='[${severity} T: ${time}] [${node}/${thread} ${file}:${line} (${function})] ${message}'
}

#################
# ROSTEST HELPERS
#################

function single_ros_test {
  if [ $# -lt 2 ]; then
    echo "Usage: single_ros_test package testname [test args]"
    echo "Use --gtest_filter=SomeRegex* to run specific tests only"
    return;
  fi;
  catkin build "$1" --no-deps --make-args "$2" && rosrun "$1" "$2" "${@:3}"
}

function rostest_gdb {
  if [ $# -lt 2 ]; then
    echo "Usage: rostest_gdb package testname [test args]"
    echo "Use --gtest_filter=SomeRegex* to run specific tests only"
    return;
  fi;
  gdb --args `catkin_find "$1" "$2"` "${@:3}"
}

function single_ros_test_xml {
  if [ $# -lt 2 ]; then
    echo "Usage: single_ros_test_xml package testname [rostest args]"
    return
  fi
  catkin build "$1" --no-deps --make-args "$2" && rostest "${@:3}" "$1" "${2}.xml"
}

function single_ros_test_test {
  if [ $# -lt 2 ]; then
    echo "Usage: single_ros_test_test package testname [rostest args]"
    return
  fi
  catkin build "$1" --no-deps --make-args "$2" && rostest "${@:3}" "$1" "${2}.test"
}

function single_ros_test_launch {
  if [ $# -lt 2 ]; then
    echo "Usage: single_ros_test_launch package testname [rostest args]"
    return
  fi
  catkin build "$1" --no-deps --make-args "$2" && rostest "${@:3}" "$1" "${2}.launch"
}


####################
# WORKSPACE SOURCING
####################

function rsource {
  local ROS_ROOT
  [ -d "/opt/ros/melodic" ] && ROS_ROOT="/opt/ros/melodic/setup.bash"
  [ -d "/opt/ros/kinetic" ] && ROS_ROOT="/opt/ros/kinetic/setup.bash"
  [ -d "/opt/ros/noetic" ] && ROS_ROOT="/opt/ros/noetic/setup.bash"
  # ROS2 things
  [ -e /usr/share/colcon_argcomplete/hook/colcon-argcomplete.bash ]\
    && . /usr/share/colcon_argcomplete/hook/colcon-argcomplete.bash
  [ -e /usr/share/colcon_cd/function/colcon_cd.sh ]\
    && . /usr/share/colcon_cd/function/colcon_cd.sh
	local WS_ROOT="git"
	local ws
  ws=$(pwd | grep -o -e "^/home/${USER}/${WS_ROOT}/[^\/]\+")
	if [ -z "$ws" ]; then
		echo "Not inside a workspace, sourcing from ${ROS_ROOT}";
		source ${ROS_ROOT}
		return 0;
	fi
  for cs in "install" "devel"; do
    local path="${ws}/${cs}/setup.bash"
    if [ -e "${path}" ]; then
      echo "Sourcing workspace in ${path}";
      source "${path}";
      return 0;
    fi
  done
  echo "Devel space not found";
  return 2;
}

function cdws {
  if [ $# -lt 1 ]; then
    echo "No ws!"
    return
  fi
  local workspace=~/git/${1}
  if [ -d "${workspace}" ]; then
    export ROS_WORKSPACE=${workspace}
    cd "${workspace}/src/${1}" || cd "${workspace}/src/" || return
    rsource
  fi
}

alias cdbase='cd $ROS_WORKSPACE'
alias cds='[ ! -z $ROS_WORKSPACE ] && cd $ROS_WORKSPACE/src'
alias cdbuild='[ ! -z $ROS_WORKSPACE ] && cd $ROS_WORKSPACE/build'
alias cddev='[ ! -z $ROS_WORKSPACE ] && cd $ROS_WORKSPACE/devel/.private'

# Better roscd
function rcd {
  local pkgpath
  if [ $ROS_VERSION = 2 ]; then
    pkgpath=$(colcon --log-base /dev/null list --base-path "${ROS_WORKSPACE}" 2>/dev/null | fzf -q "${1}" | cut -f 2) && cd "${pkgpath}" || return
  else
    pkgpath=$(rospack list 2>/dev/null | fzf -q "${1}" | cut -d" " -f 2) && cd "${pkgpath}" || return
  fi

}

# Better rosed
function re {
  local pkg
  if [ $ROS_VERSION = 2 ]; then
    pkg=$(colcon --log-base /dev/null list --base-path "${ROS_WORKSPACE}" 2>/dev/null | fzf -q "${1}" | cut -f 2) || return
  else
    pkg=$(rospack 2>/dev/null list | cut -d" " -f 1 | fzf --prompt="package: ") || return
    pkg=$(rospack 2>/dev/null find "${pkg}") || return
  fi
  local file
  file=$(fd -0 --type f . "${pkg}" | fzf --read0 --prompt="file: ") || return
  ${EDITOR} "${file}"
}

function if_ip_addr {
  #ifconfig "${1}" | awk -e '/inet / {print $2}'
  ifconfig "${1}" | grep 'inet addr' | cut -d: -f2 | cut -d\  -f 1 # kinetic
}

function perf_record_pid {
  perf record "${@:2}" -p "${1}" -o "${HOME}/perf_records/${1}-$(date --iso-8601=seconds).perf"
}

function perf_record {
  local pid
  pid=$(pidof "${1}")
  if [ -z "${pid}" ]; then
    echo "No such process"
    return
  fi
  perf record "${@:2}" -p "${pid}" -o "${HOME}/perf_records/${1}-$(date --iso-8601=seconds).perf"
}

# remove -c if you don't have center patch
function prompted_dmenu {
  dmenu -f -c -l 30 -i -p "$(echo "${@:1}")"
}

function list_ros_masters {
  ps -ax | awk '/[r]osmaster/ {print $9}' | sort
}

function with_rosmaster {
  local port
  port=$(ps -ax | awk '/[r]osmaster/ {print $9}' | sort | prompted_dmenu "${@:1}")
  ROS_MASTER_URI=http://localhost:${port} "${@:1}"
}

alias wrm='with_rosmaster'

function with_rosnode {
  rosnode list |  prompted_dmenu "${@:1}" | xargs -r "${@:1}"
}

alias rni='with_rosnode rosnode info'

function with_rostopic {
  rostopic list | prompted_dmenu "${@:1}" | xargs -r "${@:1}"
}

alias rti='with_rostopic rostopic info'

####################
# ROS MASTER SETTING
####################

function exportrosmaster {
  local wifi_dev="wlp1s0"
  local lan_dev="enxc49dede53181"

  local dev=${lan_dev}
  local uri="http://127.0.0.1:11311"

  if [ $# -ge 3 ]; then
    if [ "${3}" = "lan" ]; then
      dev=${lan_dev}
    elif [ "${3}" = "wifi" ]; then
      dev=${wifi_dev}
    else
      dev=${3}
    fi
  fi

  if [ $# -ge 2 ]; then
    uri="http://${2}"
  else
    dev="lo" # use loopback if nothing is specified
  fi

  local profile="local"
  if [ $# -ge 1 ]; then
    profile="${1}"
  fi

  local ip
  ip=$(if_ip_addr ${dev})

  export ROS_MASTER_URI=${uri}
  export ROS_IP=${ip}
  echo "Set ROS_MATER_URI=${uri} and ROS_IP=${ip} for preset ${profile} on device ${dev}"
}

function detect_on_network {
  nmap --open -p 11311 "${1}"/24 --host-timeout 2 -oG - | awk -e '/^[^#]/ {print $3" "$2":11311 wifi"}'
}

function srm_detect {
  local wifi_dev="wlp1s0"
  local ip
  ip=$(if_ip_addr ${wifi_dev})
  local candidates
  candidates=$(detect_on_network "${ip}") || return
  local selected
  selected=$(echo "${candidates}" | uniq | prompted_dmenu "set ros master") || return
  exportrosmaster ${selected}
}

function srp {
  export ROS_MASTER_URI=http://localhost:${1}
  export ROS_IP=127.0.0.1
  echo "Set ROS_MATER_URI=${ROS_MASTER_URI} and ROS_IP=${ROS_IP}"
}

function srm {
  # find running cores/ports
  local discovered
  discovered="$(list_ros_masters | awk -e '{print "running 127.0.0.1:" $0 " lo"}')"
  if [ -z "$discovered" ]; then
    discovered="local"
  fi

  local presets="${discovered}
automatica 192.168.10.22:11311 wifi
logimat 192.168.1.42:11311 wifi
vfd_serer 192.168.0.104:11311 wifi
raw4-0-lan 192.168.0.127:11311 wifi
raw3-3 192.168.43.101:11311 wifi
mir 192.168.12.20:11311 wifi
mir_pc_2 192.168.10.133:11311 wifi
cob4-18 10.4.18.11:11311 wifi
cob4-20 10.4.20.11:11311 wifi"

  local selected
  selected=$(echo "${presets}" | prompted_dmenu "set ros master") || return
  exportrosmaster ${selected}
}

###############
# ROS2 Helpers
###############
alias colb='[ -n "${ROS_WORKSPACE}" ] && pushd ${ROS_WORKSPACE} && colcon build --cmake-args -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -DCMAKE_CXX_FLAGS=-ggdb --symlink-install; popd'
alias colbthis='[ -n "${ROS_WORKSPACE}" ] && colcon --log-base ${ROS_WORKSPACE}/log build --cmake-args -DCMAKE_EXPORT_COMPILE_COMMANDS=1 --symlink-install --build-base ${ROS_WORKSPACE}/build --install-base ${ROS_WORKSPACE}/install'
alias colt='[ -n "${ROS_WORKSPACE}" ] && pushd ${ROS_WORKSPACE} && colcon test; popd'
alias coltr='[ -n "${ROS_WORKSPACE}" ] && pushd ${ROS_WORKSPACE} && colcon test-result --verbose; popd'
alias colrelbuild='[ -n "${ROS_WORKSPACE}" ] && pushd ${ROS_WORKSPACE} && colcon build --symlink-install --cmake-clean-first --cmake-force-configure --cmake-args -DCMAKE_BUILD_TYPE=Release  -DSANITIZE=OFF -DBUILD_TESTING=OFF; popd'


function single_ros2test {
  if [ $# -lt 1 ]; then
    echo "Need a test name"
    return;
  fi
  [ -z "${ROS_WORKSPACE}" ] && echo "ROS_WORKSPACE unset" && return
  pushd "${ROS_WORKSPACE}"
  function rostest_in_base {
    # suppress cmake stuff
    colcon build --cmake-target-skip-unavailable --cmake-target "${1}" > /dev/null || return
    local test_executable
    test_executable=$(find build -type f -iname "${1}") || return
    echo ${test_executable}
    [ -x "${test_executable}" ] || return 1
    ./${test_executable}
  }
  rostest_in_base "${1}"
  popd > /dev/null
}

function single_ros2test_gdb {
  if [ $# -lt 1 ]; then
    echo "Need a test name"
    return;
  fi
  [ -z "${ROS_WORKSPACE}" ] && echo "ROS_WORKSPACE unset" && return
	local test_executable
	test_executable=$(find ${ROS_WORKSPACE}/build -type f -iname "${1}") || return
	gdb ${test_executable}
}

# Takes filename to unit test and rebuilds it without dependencies + runs it
# Any extra arguments will be used as prefix for the test
function single_ros2test_from_file_fast {
	test_executable=$1
	shift
	test_name=$(basename "${test_executable}")
	build_dir=$(dirname "$test_executable")
	pkg_name=$(basename "$build_dir")
	colb --packages-select "${pkg_name}" --cmake-target "${test_name}" && $@ ${test_executable}
}

# Takes filename to unit test and rebuilds + runs it
# Any extra arguments will be used as prefix for the test
function single_ros2test_from_file {
	test_executable=$1
	shift
	test_name=$(basename "${test_executable}")
	build_dir=$(dirname "$test_executable")
	pkg_name=$(basename "$build_dir")
	colb --packages-up-to "${pkg_name}" > /dev/null && $@ ${test_executable}
}

function single_ros2test_from_source_file {
	exe=$(basename $1 .cpp)
	test_executable=$(find ${ROS_WORKSPACE}/build -type f -iname "${exe}") || return
	single_ros2test_from_file_fast "$test_executable"
}

function r2t {
  [ -z "${ROS_WORKSPACE}" ] && echo "ROS_WORKSPACE unset" && return
	local test_executable
	test_executable=$(fd -t x '_test$' "${ROS_WORKSPACE}/build" | fzf) || return
	single_ros2test_from_file $test_executable $@
}

function release_ros2_pkg {
	if [ $# -lt 1 ]; then
		echo "Need a pkg name"
		return
	fi
	pushd "${ROS_WORKSPACE}" || (echo "ROS_WORKSPACE unset" && return)

	tmpdir=$(mktemp -d)
	colcon --log-base "${tmpdir}/log" build --executor parallel --merge-install --install-base "${tmpdir}/install" --build-base "${tmpdir}/build" --ament-cmake-args -DCMAKE_BUILD_TYPE=Release --packages-up-to $@
	pushd "${tmpdir}"
	echo -e "- Install ROS ${ROS_DISTRO}\n- Install dependencies \`rosdep install --ignore-src --from-path install\`\n- Source the workspace \`source install/setup.bash\`" > SETUP.md
	tar -czf "/tmp/${1}_$(date --iso-8601).tar.gz" SETUP.md install
	popd
	popd
}

